{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":24777,"status":"ok","timestamp":1668406275220,"user":{"displayName":"어흥범주","userId":"10554293130336392046"},"user_tz":-540},"id":"gzcU1aeeGM7Z","outputId":"f42e43ab-2122-437d-e512-3df51e209509"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"hGPthwMTGe0R","executionInfo":{"status":"ok","timestamp":1668406284566,"user_tz":-540,"elapsed":1836,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}}},"outputs":[],"source":["from statsmodels.graphics.tsaplots import plot_pacf\n","from statsmodels.graphics.tsaplots import plot_acf\n","from statsmodels.tsa.statespace.sarimax import SARIMAX\n","from statsmodels.tsa.holtwinters import ExponentialSmoothing\n","from statsmodels.tsa.stattools import adfuller\n","import matplotlib.pyplot as plt\n","from tqdm import tqdm_notebook\n","import numpy as np\n","import pandas as pd\n","from itertools import product\n","import warnings\n","import re\n","warnings.filterwarnings('ignore')\n","%matplotlib inline"]},{"cell_type":"markdown","source":["강수량"],"metadata":{"id":"TNFojs-IOZ9r"}},{"cell_type":"code","source":["seoul = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/데이터/찐최종 데이터/구글클라우드플랫폼/seoul_final.csv', encoding='UTF-8')\n","busan = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/데이터/찐최종 데이터/구글클라우드플랫폼/busan_final.csv', encoding='UTF-8')\n","kangwon = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/데이터/찐최종 데이터/구글클라우드플랫폼/kangwon_final.csv', encoding='UTF-8')"],"metadata":{"id":"09R5wOr-OYOd","executionInfo":{"status":"ok","timestamp":1668406290780,"user_tz":-540,"elapsed":3250,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["seoul_rn = seoul.loc[:,['date', 'sum_rn']]"],"metadata":{"id":"bQLicuznFMI0","executionInfo":{"status":"ok","timestamp":1668406292872,"user_tz":-540,"elapsed":7,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["seoul_rn.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K1IDZ27a0Yfp","executionInfo":{"status":"ok","timestamp":1668407206572,"user_tz":-540,"elapsed":7,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}},"outputId":"2502487f-19d0-439a-86f4-a31a1d77e76f"},"execution_count":36,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","DatetimeIndex: 3957 entries, 2012-01-01 to 2022-10-31\n","Data columns (total 1 columns):\n"," #   Column  Non-Null Count  Dtype  \n","---  ------  --------------  -----  \n"," 0   sum_rn  3957 non-null   float64\n","dtypes: float64(1)\n","memory usage: 190.9 KB\n"]}]},{"cell_type":"code","source":["seoul_rn['date'] = pd.to_datetime(seoul_rn['date'])\n","seoul_rn= seoul_rn.set_index('date')\n","print(seoul_rn.head())\n","seoul_rn.plot()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"htCgJcJydHCJ","executionInfo":{"status":"ok","timestamp":1668406295683,"user_tz":-540,"elapsed":648,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}},"outputId":"6a3d19c7-1daa-4ce1-b97c-c43bc17f7836"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["            sum_rn\n","date              \n","2012-01-01     0.0\n","2012-01-02     0.0\n","2012-01-03     0.0\n","2012-01-04     0.0\n","2012-01-05     0.0\n"]},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7fe7e2c766d0>"]},"metadata":{},"execution_count":5},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["#로그변환\n","y = np.log(seoul_rn[\"sum_rn\"])\n","\n","plt.plot(seoul_rn, label=\"original\")\n","plt.plot(y, label=\"log\")\n","plt.title(\"log transformation\", size=15)\n","plt.legend()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"EufYGi4AW5j8","executionInfo":{"status":"ok","timestamp":1668406300914,"user_tz":-540,"elapsed":720,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}},"outputId":"b731bd86-5d3e-4acc-b3b6-c367116eb5ba"},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["import math\n","from keras.models import Sequential\n","from keras.layers import Dense\n","from keras.layers import LSTM\n","from sklearn.preprocessing import MinMaxScaler\n","from sklearn.metrics import mean_squared_error\n","from sklearn.metrics import mean_absolute_error\n","\n","from IPython.display import SVG\n","from keras.utils.vis_utils import model_to_dot\n","\n","import itertools\n","import warnings\n","warnings.filterwarnings('ignore')"],"metadata":{"id":"d38YcR1ckMsY","executionInfo":{"status":"ok","timestamp":1668406309006,"user_tz":-540,"elapsed":3577,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["seoul_rn.shape"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"F9Fg5nnxkUqO","executionInfo":{"status":"ok","timestamp":1668406309007,"user_tz":-540,"elapsed":10,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}},"outputId":"33a0dd19-4205-4eb3-d375-d4ba26b48237"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(3957, 1)"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["#train test split\n","split_date = pd.Timestamp('2021-12-31')\n","rainfall_data = seoul_rn.loc[:split_date,['sum_rn']]\n","test_rainfall_data = seoul_rn.loc[split_date:,['sum_rn']]\n","print(rainfall_data.shape, test_rainfall_data.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DzmD8DQfmxSH","executionInfo":{"status":"ok","timestamp":1668406313237,"user_tz":-540,"elapsed":632,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}},"outputId":"7903b7af-dfd2-4112-f4d0-a3693c9d2b05"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["(3653, 1) (305, 1)\n"]}]},{"cell_type":"code","source":["scaler = MinMaxScaler(feature_range=(0, 1))\n","scaler.fit(rainfall_data)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z6_HxOtgnCxI","executionInfo":{"status":"ok","timestamp":1668406325238,"user_tz":-540,"elapsed":457,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}},"outputId":"1653b56c-b393-4403-d36c-1d897004be7e"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["MinMaxScaler()"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["#functions\n","def mean_absolute_percentage_error(y_true, y_pred): \n","    y_true, y_pred = np.array(y_true), np.array(y_pred)\n","    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100\n","\n","def root_mean_squared_error(y_true, y_pred):\n","    mse = mean_squared_error(y_true, y_pred)\n","    rmse = np.sqrt(mse)\n","    return rmse\n","\n","def calculate_performance(y_true, y_pred):\n","    mse = mean_squared_error(y_true, y_pred)\n","    mae = mean_absolute_error(y_true, y_pred)\n","    mape = mean_absolute_percentage_error(y_true, y_pred)\n","    rmse = root_mean_squared_error(y_true, y_pred)\n","    return round(mse, 3), round(mae, 3), round(mape, 3), round(rmse, 3)\n","\n","def plot_keras_model(model, show_shapes=True, show_layer_names=True):\n","    return SVG(model_to_dot(model, show_shapes=show_shapes, show_layer_names=show_layer_names).create(prog='dot',format='svg'))\n","\n","def get_combinations(parameters):\n","    return list(itertools.product(*parameters))"],"metadata":{"id":"xPh3l0etnTc4","executionInfo":{"status":"ok","timestamp":1668406330109,"user_tz":-540,"elapsed":418,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["#ANN model\n","def create_NN(input_nodes, hidden_nodes, output_nodes):\n","    model = Sequential()\n","    model.add(Dense(int(hidden_nodes), input_dim=int(input_nodes)))\n","    model.add(Dense(int(output_nodes)))\n","    model.compile(loss='mean_squared_error', optimizer='adam')\n","    return model"],"metadata":{"id":"THcO15a8nlTd","executionInfo":{"status":"ok","timestamp":1668406340083,"user_tz":-540,"elapsed":551,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["def train_model(model, X_train, y_train, epochs, batch_size):\n","    model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size, verbose=0, shuffle=True)\n","    return model\n","\n","def reshape_arrays(X_train, y_train):\n","    X_train = np.array(X_train)\n","    y_train = np.reshape(y_train, (len(y_train), 1))\n","    return X_train, y_train"],"metadata":{"id":"lcQ2bpxUnxFE","executionInfo":{"status":"ok","timestamp":1668406342156,"user_tz":-540,"elapsed":5,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["#CNN model-전처리\n","def preprocess_FNN(data, look_back):\n","    data = np.array(data)[:, 0]\n","    X_train = []\n","    y_train = []\n","    for i in range(data.shape[0]-look_back):\n","        x = data[i:look_back+i][::-1]\n","        y = data[look_back+i]\n","        X_train.append(list(x))\n","        y_train.append(y)\n","    input_seq_for_test = data[i+1:look_back+i+1][::-1]\n","    return X_train, y_train, input_seq_for_test"],"metadata":{"id":"s-QeKjken8fy","executionInfo":{"status":"ok","timestamp":1668406724855,"user_tz":-540,"elapsed":627,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["#CNN model-예측\n","def forecast_FNN(model, input_sequence, future_steps):\n","    forecasted_values = []\n","    for i in range(future_steps):\n","        forecasted_value = model.predict(input_sequence)\n","        forecasted_values.append(forecasted_value[0][0])\n","        input_sequence[0] = np.append(forecasted_value, input_sequence[0][:-1])\n","    return forecasted_values"],"metadata":{"id":"UK6VFUrNoFox","executionInfo":{"status":"ok","timestamp":1668406730410,"user_tz":-540,"elapsed":6,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["#CNN\n","def FNN(data, look_back, hidden_nodes, output_nodes, epochs, batch_size, future_steps, scaler):\n","    data = scaler.transform(data)\n","    X_train, y_train, input_seq_for_test_FNN = preprocess_FNN(data, look_back)\n","    X_train, y_train = reshape_arrays(X_train, y_train)\n","\n","    model_FNN = create_NN(input_nodes=look_back, hidden_nodes=hidden_nodes, output_nodes=output_nodes)\n","    model_FNN = train_model(model_FNN, X_train, y_train, epochs, batch_size)\n","\n","    input_seq_for_test_FNN = np.reshape(input_seq_for_test_FNN, (1, len(input_seq_for_test_FNN)))\n","    forecasted_values_FNN = forecast_FNN(model_FNN, input_sequence=input_seq_for_test_FNN, future_steps=future_steps)\n","    \n","    forecasted_values_FNN = list(scaler.inverse_transform([forecasted_values_FNN])[0])\n","    \n","    return model_FNN, forecasted_values_FNN"],"metadata":{"id":"VKdxU52moO5T","executionInfo":{"status":"ok","timestamp":1668406730913,"user_tz":-540,"elapsed":4,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}}},"execution_count":16,"outputs":[]},{"cell_type":"code","source":["#CNN-test data 예측력\n","def get_accuracies_FNN(rainfall_data, test_rainfall_data, parameters, scaler):\n","    combination_of_params = get_combinations(parameters)\n","    information_FNN = []\n","    iterator = 0\n","    print('FNN - Number of combinations: ' + str(len(combination_of_params)))\n","    \n","    for param in combination_of_params:\n","        if (iterator+1) != len(combination_of_params):\n","            print(iterator+1, end=' -> ')\n","        else:\n","            print(iterator+1)\n","        iterator = iterator+1\n","\n","        look_back = param[0]\n","        hidden_nodes = param[1]\n","        output_nodes = param[2]\n","        epochs = param[3]\n","        batch_size = param[4]\n","        future_steps = param[5]\n","\n","        model_FNN, forecasted_values_FNN = FNN(rainfall_data, look_back, hidden_nodes, output_nodes, epochs, batch_size, future_steps, scaler)\n","        \n","        y_true = test_rainfall_data.loc[:future_steps].Precipitation\n","        mse, mae, mape, rmse = calculate_performance(y_true, forecasted_values_FNN)\n","        \n","        info = list(param) + [mse, mae, rmse] + forecasted_values_FNN\n","        information_FNN.append(info)\n","\n","    information_FNN_df = pd.DataFrame(information_FNN)\n","    indexes = [str(i) for i in list(range(1, future_steps+1))]\n","    information_FNN_df.columns = ['look_back', 'hidden_nodes', 'output_nodes', 'epochs', 'batch_size', 'future_steps', 'MSE', 'MAE', 'RMSE'] + indexes\n","    return information_FNN_df"],"metadata":{"id":"Km1plnLAoWa7","executionInfo":{"status":"ok","timestamp":1668406733938,"user_tz":-540,"elapsed":5,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}}},"execution_count":17,"outputs":[]},{"cell_type":"code","source":["#TLNN model-전처리\n","def preprocess_TLNN(data, time_lagged_points):\n","    data = np.array(data)[:, 0]\n","    X_train = []\n","    y_train = []\n","    for i in range(max(time_lagged_points), data.shape[0]):\n","        x = [data[i-p] for p in time_lagged_points]\n","        y = data[i]\n","        X_train.append(list(x))\n","        y_train.append(y)\n","    input_seq_for_test = [data[i+1-p] for p in time_lagged_points]\n","    return X_train, y_train, input_seq_for_test"],"metadata":{"id":"p8JsAUzIocTa","executionInfo":{"status":"ok","timestamp":1668406736180,"user_tz":-540,"elapsed":4,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["#TLNN model-예측\n","def forecast_TLNN(model, time_lagged_points, last_sequence, future_steps):\n","    forecasted_values = []\n","    max_lag = max(time_lagged_points)\n","    for i in range(future_steps):\n","        input_sequence = [last_sequence[max_lag - p] for p in time_lagged_points]\n","        forecasted_value = model.predict(np.reshape(input_sequence, (1, len(input_sequence))))\n","        forecasted_values.append(forecasted_value[0][0])\n","        last_sequence = last_sequence[1:] + [forecasted_value[0][0]]\n","    return forecasted_values"],"metadata":{"id":"PMoZUN9ooj5a","executionInfo":{"status":"ok","timestamp":1668406738319,"user_tz":-540,"elapsed":4,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["#TLNN model\n","def TLNN(data, time_lagged_points, hidden_nodes, output_nodes, epochs, batch_size, future_steps, scaler):\n","    data = scaler.transform(data)\n","    X_train, y_train, input_seq_for_test_TLNN = preprocess_TLNN(data, time_lagged_points)\n","    X_train, y_train = reshape_arrays(X_train, y_train)\n","    model_TLNN = create_NN(input_nodes=len(time_lagged_points), hidden_nodes=hidden_nodes, output_nodes=output_nodes)\n","    model_TLNN = train_model(model_TLNN, X_train, y_train, epochs, batch_size)\n","\n","    max_lag = max(time_lagged_points)\n","    forecasted_values_TLNN = forecast_TLNN(model_TLNN, time_lagged_points, \n","                                      list(data[-max_lag:]), future_steps=future_steps)\n","    forecasted_values_TLNN = list(scaler.inverse_transform([forecasted_values_TLNN])[0])\n","    \n","    return model_TLNN, forecasted_values_TLNN"],"metadata":{"id":"cRhzxXPiom6t","executionInfo":{"status":"ok","timestamp":1668406740412,"user_tz":-540,"elapsed":6,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}}},"execution_count":20,"outputs":[]},{"cell_type":"code","source":["#TLNN-test data 예측력\n","def get_accuracies_TLNN(rainfall_data, test_rainfall_data, parameters, scaler):\n","    combination_of_params = get_combinations(parameters)\n","    information_TLNN = []\n","    iterator = 0\n","    print('TLNN - Number of combinations: ' + str(len(combination_of_params)))\n","    \n","    for param in combination_of_params:\n","        if (iterator+1) != len(combination_of_params):\n","            print(iterator+1, end=' -> ')\n","        else:\n","            print(iterator+1)\n","        iterator = iterator+1\n","\n","        time_lagged_points = param[0]\n","        hidden_nodes = param[1]\n","        output_nodes = param[2]\n","        epochs = param[3]\n","        batch_size = param[4]\n","        future_steps = param[5]\n","\n","        model_TLNN, forecasted_values_TLNN = TLNN(rainfall_data, time_lagged_points, hidden_nodes, output_nodes, epochs, batch_size, future_steps, scaler)\n","        \n","        y_true = test_rainfall_data.loc[:future_steps].Precipitation\n","        mse, mae, mape, rmse = calculate_performance(y_true, forecasted_values_TLNN)\n","        \n","        info = list(param) + [mse, mae, rmse] + forecasted_values_TLNN\n","        information_TLNN.append(info)\n","\n","    information_TLNN_df = pd.DataFrame(information_TLNN)\n","    indexes = [str(i) for i in list(range(1, future_steps+1))]\n","    information_TLNN_df.columns = ['look_back_lags', 'hidden_nodes', 'output_nodes', 'epochs', 'batch_size', 'future_steps', 'MSE', 'MAE', 'RMSE'] + indexes\n","    return information_TLNN_df"],"metadata":{"id":"hd13bQcvoqho","executionInfo":{"status":"ok","timestamp":1668406742501,"user_tz":-540,"elapsed":4,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}}},"execution_count":21,"outputs":[]},{"cell_type":"code","source":["#SANN model-전처리\n","def preprocess_SANN(data, seasonal_period):\n","    data = np.array(data)[:, 0]\n","    X_train = []\n","    y_train = []\n","    for i in range(seasonal_period, data.shape[0]-seasonal_period+1):\n","        x = data[i-seasonal_period:i][::-1]\n","        y = data[i:i+seasonal_period]\n","        X_train.append(list(x))\n","        y_train.append(list(y))\n","    input_seq_for_test = data[i+1-seasonal_period:i+1][::-1]\n","    return X_train, y_train, input_seq_for_test"],"metadata":{"id":"ZczkKLwuovCD","executionInfo":{"status":"ok","timestamp":1668406747925,"user_tz":-540,"elapsed":508,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["#SANN model-예측\n","def forecast_SANN(model, input_sequence, seasonal_period, future_steps):\n","    iterations = future_steps/seasonal_period\n","    forecasted_values = []\n","    for i in range(int(iterations) + 1):\n","        next_forecasted_values = model.predict(input_sequence)\n","        forecasted_values += list(next_forecasted_values[0])\n","        input_sequence = next_forecasted_values\n","    return forecasted_values[:future_steps]"],"metadata":{"id":"S0R1a-ywo2ES","executionInfo":{"status":"ok","timestamp":1668406748863,"user_tz":-540,"elapsed":5,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["#SANN model\n","def SANN(data, seasonal_period, hidden_nodes, epochs, batch_size, future_steps, scaler):\n","    data = scaler.transform(data)\n","    X_train, y_train, input_seq_for_test_SANN = preprocess_SANN(data, seasonal_period)\n","    X_train = np.array(X_train)\n","    y_train = np.array(y_train)\n","\n","    input_seq_for_test_SANN = np.reshape(input_seq_for_test_SANN, (1, len(input_seq_for_test_SANN)))\n","    model_SANN = create_NN(input_nodes=seasonal_period, hidden_nodes=hidden_nodes, output_nodes=seasonal_period)\n","    model_SANN = train_model(model_SANN, X_train, y_train, epochs, batch_size)\n","    \n","    forecasted_values_SANN = forecast_SANN(model_SANN, input_seq_for_test_SANN, seasonal_period, future_steps=future_steps)\n","    forecasted_values_SANN = list(scaler.inverse_transform([forecasted_values_SANN])[0])\n","    return model_SANN, forecasted_values_SANN"],"metadata":{"id":"UzEV8Pyyo5JH","executionInfo":{"status":"ok","timestamp":1668406750096,"user_tz":-540,"elapsed":4,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["#SANN model-test data 예측력\n","def get_accuracies_SANN(rainfall_data, test_rainfall_data, parameters, scaler):\n","    combination_of_params = get_combinations(parameters)\n","    information_SANN = []\n","    iterator = 0\n","    print('SANN - Number of combinations: ' + str(len(combination_of_params)))\n","    \n","    for param in combination_of_params:\n","        if (iterator+1) != len(combination_of_params):\n","            print(iterator+1, end=' -> ')\n","        else:\n","            print(iterator+1)\n","        iterator = iterator+1\n","\n","        seasonal_period = param[0]\n","        hidden_nodes = param[1]\n","        epochs = param[2]\n","        batch_size = param[3]\n","        future_steps = param[4]\n","\n","        model_SANN, forecasted_values_SANN = SANN(rainfall_data, seasonal_period, hidden_nodes, epochs, batch_size, future_steps, scaler)\n","        \n","        y_true = test_rainfall_data.loc[:future_steps].Precipitation\n","        mse, mae, mape, rmse = calculate_performance(y_true, forecasted_values_SANN)\n","        \n","        info = list(param) + [mse, mae, rmse] + forecasted_values_SANN\n","        information_SANN.append(info)\n","\n","    information_SANN_df = pd.DataFrame(information_SANN)\n","    indexes = [str(i) for i in list(range(1, future_steps+1))]\n","    information_SANN_df.columns = ['seasonal_period', 'hidden_nodes', 'epochs', 'batch_size', 'future_steps', 'MSE', 'MAE', 'RMSE'] + indexes\n","    return information_SANN_df"],"metadata":{"id":"FNz4PFWRo8ld","executionInfo":{"status":"ok","timestamp":1668406751429,"user_tz":-540,"elapsed":4,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}}},"execution_count":25,"outputs":[]},{"cell_type":"code","source":["#LSTM model\n","def create_LSTM(input_nodes, hidden_nodes, output_nodes):\n","    model = Sequential()\n","    model.add(LSTM(hidden_nodes, input_shape=(1, input_nodes)))\n","    model.add(Dense(output_nodes))\n","    model.compile(loss='mean_squared_error', optimizer='adam')\n","    return model"],"metadata":{"id":"Hs98Cao8pyI8","executionInfo":{"status":"ok","timestamp":1668406753191,"user_tz":-540,"elapsed":7,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["#LSTM model-전처리\n","def preprocess_LSTM(data, look_back):\n","    data = np.array(data)[:, 0]\n","    X_train = []\n","    y_train = []\n","    for i in range(data.shape[0]-look_back):\n","        x = data[i:look_back+i][::-1]\n","        y = data[look_back+i]\n","        X_train.append(list(x))\n","        y_train.append(y)\n","    input_seq_for_test = data[i+1:look_back+i+1][::-1]\n","    return X_train, y_train, input_seq_for_test"],"metadata":{"id":"mQEh4wcCp10l","executionInfo":{"status":"ok","timestamp":1668406754389,"user_tz":-540,"elapsed":4,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["#LSTM model-예측\n","def forecast_LSTM(model, input_sequence, future_steps):\n","    forecasted_values = []\n","    for i in range(future_steps):\n","        forecasted_value = model.predict(input_sequence)\n","        forecasted_values.append(forecasted_value[0][0])\n","        input_sequence[0][0] = np.append(forecasted_value, input_sequence[0][0][:-1])\n","    return forecasted_values"],"metadata":{"id":"1lbdvhu0p5Jq","executionInfo":{"status":"ok","timestamp":1668406756225,"user_tz":-540,"elapsed":4,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["#LSTM model\n","def Long_Short_Term_Memory(data, look_back, hidden_nodes, output_nodes, epochs, batch_size, future_steps, scaler):\n","    data = scaler.transform(data)\n","    X_train, y_train, input_seq_for_test_LSTM = preprocess_LSTM(data, look_back)\n","    X_train = np.reshape(X_train, (len(X_train), 1, look_back))\n","\n","    model_LSTM = create_LSTM(input_nodes=look_back, hidden_nodes=hidden_nodes, output_nodes=output_nodes)\n","    plot_keras_model(model_LSTM)\n","    model_LSTM = train_model(model_LSTM, X_train, y_train, epochs, batch_size)\n","\n","    input_seq_for_test_LSTM = np.reshape(input_seq_for_test_LSTM, (1, 1, len(input_seq_for_test_LSTM)))\n","    forecasted_values_LSTM = forecast_LSTM(model_LSTM, input_sequence=input_seq_for_test_LSTM, future_steps=future_steps)\n","    \n","    forecasted_values_LSTM = list(scaler.inverse_transform([forecasted_values_LSTM])[0])\n","    \n","    return model_LSTM, forecasted_values_LSTM"],"metadata":{"id":"KB5vKTPep9T-","executionInfo":{"status":"ok","timestamp":1668406757816,"user_tz":-540,"elapsed":435,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["#LSTM-test data 예측력\n","def get_accuracies_LSTM(rainfall_data, test_rainfall_data, parameters, scaler):\n","    combination_of_params = get_combinations(parameters)\n","    information_LSTM = []\n","    iterator = 0\n","    print('LSTM - Number of combinations: ' + str(len(combination_of_params)))\n","    \n","    for param in combination_of_params:\n","        if (iterator+1) != len(combination_of_params):\n","            print(iterator+1, end=' -> ')\n","        else:\n","            print(iterator+1)\n","        iterator = iterator+1\n","\n","        input_nodes = param[0]\n","        hidden_nodes = param[1]\n","        output_nodes = param[2]\n","        epochs = param[3]\n","        batch_size = param[4]\n","        future_steps = param[5]\n","\n","        model_LSTM, forecasted_values_LSTM = Long_Short_Term_Memory(rainfall_data, input_nodes, hidden_nodes, output_nodes, epochs, batch_size, future_steps, scaler)\n","        \n","        y_true = test_rainfall_data.loc[:future_steps].Precipitation\n","        mse, mae, mape, rmse = calculate_performance(y_true, forecasted_values_LSTM)\n","        \n","        info = list(param) + [mse, mae, rmse] + forecasted_values_LSTM\n","        information_LSTM.append(info)\n","\n","    information_LSTM_df = pd.DataFrame(information_LSTM)\n","    indexes = [str(i) for i in list(range(1, future_steps+1))]\n","    information_LSTM_df.columns = ['look_back', 'hidden_nodes', 'output_nodes', 'epochs', 'batch_size', 'future_steps', 'MSE', 'MAE', 'RMSE'] + indexes\n","    return information_LSTM_df"],"metadata":{"id":"uB3NSjTpqBGV","executionInfo":{"status":"ok","timestamp":1668406758504,"user_tz":-540,"elapsed":6,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}}},"execution_count":30,"outputs":[]},{"cell_type":"code","source":["#실제값과 예측값 plot\n","def analyze_results(data_frame, test_rainfall_data, name, flag=False):\n","    optimized_params = data_frame.iloc[data_frame.RMSE.argmin]\n","    future_steps = optimized_params.future_steps\n","    forecast_values = optimized_params[-1*int(future_steps):]\n","    y_true = test_rainfall_data.loc[:int(future_steps)]\n","    forecast_values.index = y_true.index\n","    \n","    print('=== Best parameters of ' + name + ' ===\\n')\n","    if (name == 'FNN' or name == 'LSTM'):\n","        model = create_NN(optimized_params.look_back, \n","                          optimized_params.hidden_nodes, \n","                          optimized_params.output_nodes)\n","        print('Input nodes(p): ' + str(optimized_params.look_back))\n","        print('Hidden nodes: ' + str(optimized_params.hidden_nodes))\n","        print('Output nodes: ' + str(optimized_params.output_nodes))\n","    elif (name == 'TLNN'):\n","        model = create_NN(len(optimized_params.look_back_lags), \n","                          optimized_params.hidden_nodes, \n","                          optimized_params.output_nodes)\n","        s = ''\n","        for i in optimized_params.look_back_lags:\n","            s = s+' '+str(i)\n","        print('Look back lags: ' + s)\n","        print('Hidden nodes: ' + str(optimized_params.hidden_nodes))\n","        print('Output nodes: ' + str(optimized_params.output_nodes))\n","    elif (name == 'SANN'):\n","        model = create_NN(optimized_params.seasonal_period, \n","                          optimized_params.hidden_nodes, \n","                          optimized_params.seasonal_period)\n","        print('Input nodes(s): ' + str(optimized_params.seasonal_period))\n","        print('Hidden nodes: ' + str(optimized_params.hidden_nodes))\n","        print('Output nodes: ' + str(optimized_params.seasonal_period))\n","        \n","    print('Number of epochs: ' + str(optimized_params.epochs))\n","    print('Batch size: ' + str(optimized_params.batch_size))\n","    print('Number of future steps forecasted: ' + str(optimized_params.future_steps))\n","    print('Mean Squared Error(MSE): ' + str(optimized_params.MSE))\n","    print('Mean Absolute Error(MAE): ' + str(optimized_params.MAE))\n","    print('Root Mean Squared Error(RMSE): ' + str(optimized_params.RMSE))\n","    print('\\n\\n')\n","    \n","    return optimized_params"],"metadata":{"id":"taIeVWZlpBsQ","executionInfo":{"status":"ok","timestamp":1668406760198,"user_tz":-540,"elapsed":4,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}}},"execution_count":31,"outputs":[]},{"cell_type":"code","source":["#가장 좋은 모델 \n","def best_of_all(list_of_methods):\n","    RMSE_values = [x.RMSE for x in list_of_methods]\n","    index = np.argmin(RMSE_values)\n","    if (index==0):\n","        name = 'FNN'\n","    elif (index == 1):\n","        name = 'TLNN'\n","    elif (index == 2):\n","        name = 'SANN'\n","    else:\n","        name = 'LSTM'\n","    print(RMSE_values)\n","    \n","    names = ['FNN', 'TLNN', 'SANN', 'LSTM']\n","    RMSE_info = pd.Series(RMSE_values, index=names)\n","    \n","    print('Overall Best method on this data is ' + name)\n","    return index, name, RMSE_info"],"metadata":{"id":"4g83E-3mpQ8A","executionInfo":{"status":"ok","timestamp":1668406762530,"user_tz":-540,"elapsed":2,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}}},"execution_count":32,"outputs":[]},{"cell_type":"code","source":["def compare_ANN_methods(rainfall_data, test_rainfall_data, scaler, parameters_FNN, parameters_TLNN, parameters_SANN, parameters_LSTM, future_steps):\n","    \n","    information_FNN_df = get_accuracies_FNN(rainfall_data, test_rainfall_data, parameters_FNN, scaler)\n","    optimized_params_FNN = analyze_results(information_FNN_df, test_rainfall_data, 'FNN')\n","    \n","    information_TLNN_df = get_accuracies_TLNN(rainfall_data, test_rainfall_data, parameters_TLNN, scaler)\n","    optimized_params_TLNN = analyze_results(information_TLNN_df, test_rainfall_data, 'TLNN')\n","    \n","    information_SANN_df = get_accuracies_SANN(rainfall_data, test_rainfall_data, parameters_SANN, scaler)\n","    optimized_params_SANN = analyze_results(information_SANN_df, test_rainfall_data, 'SANN')\n","    \n","    information_LSTM_df = get_accuracies_LSTM(rainfall_data, test_rainfall_data, parameters_LSTM, scaler)\n","    optimized_params_LSTM = analyze_results(information_LSTM_df, test_rainfall_data, 'LSTM')\n","    \n","    list_of_methods = [optimized_params_FNN, optimized_params_TLNN, optimized_params_SANN, optimized_params_LSTM]\n","    information = [information_FNN_df, information_TLNN_df, information_SANN_df, information_LSTM_df]\n","    index, name, RMSE_info = best_of_all(list_of_methods)\n","    best_optimized_params = analyze_results(information[index], test_rainfall_data, name, True)\n","    return RMSE_info"],"metadata":{"id":"XyCUFo7Rpjag","executionInfo":{"status":"ok","timestamp":1668406766731,"user_tz":-540,"elapsed":3,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}}},"execution_count":33,"outputs":[]},{"cell_type":"code","source":["future_steps = 60"],"metadata":{"id":"CAHReyHFplUG","executionInfo":{"status":"ok","timestamp":1668406769806,"user_tz":-540,"elapsed":548,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}}},"execution_count":34,"outputs":[]},{"cell_type":"code","source":["parameters_FNN = [[1,2,3,6,8,10,12], [3,4,5,6], [1], [500], [20], [future_steps]]\n","\n","information_FNN_df = get_accuracies_FNN(rainfall_data, test_rainfall_data, parameters_FNN, scaler)\n","optimized_params_FNN = analyze_results(information_FNN_df, test_rainfall_data, 'FNN')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"MslChNzR2CiM","executionInfo":{"status":"error","timestamp":1668407784953,"user_tz":-540,"elapsed":130398,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}},"outputId":"4934be60-51a9-46b4-8c60-b9a1d0a37703"},"execution_count":37,"outputs":[{"output_type":"stream","name":"stdout","text":["FNN - Number of combinations: 28\n","1/1 [==============================] - 0s 48ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 28ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 18ms/step\n"]},{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-37-d547638964e1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mparameters_FNN\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m8\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m12\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m6\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m500\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mfuture_steps\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0minformation_FNN_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_accuracies_FNN\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrainfall_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_rainfall_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparameters_FNN\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscaler\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0moptimized_params_FNN\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0manalyze_results\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minformation_FNN_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_rainfall_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'FNN'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-17-7298cd83e5fc>\u001b[0m in \u001b[0;36mget_accuracies_FNN\u001b[0;34m(rainfall_data, test_rainfall_data, parameters, scaler)\u001b[0m\n\u001b[1;32m     22\u001b[0m         \u001b[0mmodel_FNN\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mforecasted_values_FNN\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mFNN\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrainfall_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlook_back\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhidden_nodes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput_nodes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfuture_steps\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscaler\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 24\u001b[0;31m         \u001b[0my_true\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest_rainfall_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mfuture_steps\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPrecipitation\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     25\u001b[0m         \u001b[0mmse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmae\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrmse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcalculate_performance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mforecasted_values_FNN\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    929\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    930\u001b[0m             \u001b[0mmaybe_callable\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_if_callable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 931\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmaybe_callable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    932\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    933\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_is_scalar_access\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1140\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mslice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1141\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_key\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1142\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_slice_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1143\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mcom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_bool_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1144\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getbool_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_get_slice_axis\u001b[0;34m(self, slice_obj, axis)\u001b[0m\n\u001b[1;32m   1174\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1175\u001b[0m         \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1176\u001b[0;31m         \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mslice_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mslice_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mslice_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mslice_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1177\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1178\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mslice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/datetimes.py\u001b[0m in \u001b[0;36mslice_indexer\u001b[0;34m(self, start, end, step, kind)\u001b[0m\n\u001b[1;32m    809\u001b[0m             \u001b[0;32mor\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_monotonic_increasing\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    810\u001b[0m         ):\n\u001b[0;32m--> 811\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mIndex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mslice_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstep\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    812\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    813\u001b[0m         \u001b[0mmask\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mslice_indexer\u001b[0;34m(self, start, end, step, kind)\u001b[0m\n\u001b[1;32m   5683\u001b[0m         \u001b[0mslice\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5684\u001b[0m         \"\"\"\n\u001b[0;32m-> 5685\u001b[0;31m         \u001b[0mstart_slice\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend_slice\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mslice_locs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstep\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5686\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5687\u001b[0m         \u001b[0;31m# return a slice\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mslice_locs\u001b[0;34m(self, start, end, step, kind)\u001b[0m\n\u001b[1;32m   5891\u001b[0m         \u001b[0mend_slice\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5892\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mend\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5893\u001b[0;31m             \u001b[0mend_slice\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_slice_bound\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"right\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5894\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mend_slice\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5895\u001b[0m             \u001b[0mend_slice\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_slice_bound\u001b[0;34m(self, label, side, kind)\u001b[0m\n\u001b[1;32m   5795\u001b[0m         \u001b[0;31m# For datetime indices label may be a string that has to be converted\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5796\u001b[0m         \u001b[0;31m# to datetime boundary according to its resolution.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5797\u001b[0;31m         \u001b[0mlabel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_cast_slice_bound\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mside\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5798\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5799\u001b[0m         \u001b[0;31m# we need to look up the label\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/datetimes.py\u001b[0m in \u001b[0;36m_maybe_cast_slice_bound\u001b[0;34m(self, label, side, kind)\u001b[0m\n\u001b[1;32m    756\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_deprecate_mismatched_indexing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    757\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 758\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_invalid_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"slice\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    759\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    760\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_cast_for_get_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: cannot do slice indexing on DatetimeIndex with these indexers [60] of type int"]}]},{"cell_type":"code","source":["# look_back, hidden_nodes, output_nodes, epochs, batch_size, future_steps\n","parameters_FNN = [[1,2,3,6,8,10,12], [3,4,5,6], [1], [500], [20], [future_steps]]\n","\n","# time_lagged_points, hidden_nodes, output_nodes, epochs, batch_size, future_steps\n","parameters_TLNN = [[[1,2,3,11,12], [1,2,3,4,11,12], [1,2,3,11,12,13], [1,2,3,4,5,6,10,11,12]], [3,4,5,6], [1], [300], [20], [future_steps]]\n","\n","# seasonal_period, hidden_nodes, epochs, batch_size, future_steps\n","parameters_SANN = [[12], [3,4,5,6,7,8,9,10], [500], [20], [future_steps]]\n","\n","# look_back, hidden_nodes, output_nodes, epochs, batch_size, future_steps\n","parameters_LSTM = [[1,2,3,4,5,6,7,8,9,10,11,12,13], [3,4,5,6], [1], [300], [20], [future_steps]]\n","\n","RMSE_info = compare_ANN_methods(rainfall_data, test_rainfall_data, scaler, \n","                    parameters_FNN, parameters_TLNN, parameters_SANN, parameters_LSTM, future_steps)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"cqx98FSKqKEl","executionInfo":{"status":"error","timestamp":1668406899595,"user_tz":-540,"elapsed":128319,"user":{"displayName":"어흥범주","userId":"10554293130336392046"}},"outputId":"cfb50662-c8ae-47a2-8fed-18ab320ed7be"},"execution_count":35,"outputs":[{"output_type":"stream","name":"stdout","text":["FNN - Number of combinations: 28\n","1/1 [==============================] - 0s 74ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 26ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 21ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 19ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 16ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 20ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 18ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 17ms/step\n","1/1 [==============================] - 0s 18ms/step\n"]},{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-35-f4745f5d112a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m RMSE_info = compare_ANN_methods(rainfall_data, test_rainfall_data, scaler, \n\u001b[0;32m---> 14\u001b[0;31m                     parameters_FNN, parameters_TLNN, parameters_SANN, parameters_LSTM, future_steps)\n\u001b[0m","\u001b[0;32m<ipython-input-33-f84dac40826b>\u001b[0m in \u001b[0;36mcompare_ANN_methods\u001b[0;34m(rainfall_data, test_rainfall_data, scaler, parameters_FNN, parameters_TLNN, parameters_SANN, parameters_LSTM, future_steps)\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mcompare_ANN_methods\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrainfall_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_rainfall_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscaler\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparameters_FNN\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparameters_TLNN\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparameters_SANN\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparameters_LSTM\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfuture_steps\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m     \u001b[0minformation_FNN_df\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_accuracies_FNN\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrainfall_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_rainfall_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparameters_FNN\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscaler\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m     \u001b[0moptimized_params_FNN\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0manalyze_results\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minformation_FNN_df\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_rainfall_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'FNN'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-17-7298cd83e5fc>\u001b[0m in \u001b[0;36mget_accuracies_FNN\u001b[0;34m(rainfall_data, test_rainfall_data, parameters, scaler)\u001b[0m\n\u001b[1;32m     22\u001b[0m         \u001b[0mmodel_FNN\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mforecasted_values_FNN\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mFNN\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrainfall_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlook_back\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhidden_nodes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput_nodes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfuture_steps\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscaler\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 24\u001b[0;31m         \u001b[0my_true\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtest_rainfall_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mfuture_steps\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPrecipitation\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     25\u001b[0m         \u001b[0mmse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmae\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrmse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcalculate_performance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_true\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mforecasted_values_FNN\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    929\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    930\u001b[0m             \u001b[0mmaybe_callable\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_if_callable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 931\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmaybe_callable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    932\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    933\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_is_scalar_access\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_getitem_axis\u001b[0;34m(self, key, axis)\u001b[0m\n\u001b[1;32m   1140\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mslice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1141\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_key\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1142\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_slice_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1143\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mcom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_bool_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1144\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getbool_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_get_slice_axis\u001b[0;34m(self, slice_obj, axis)\u001b[0m\n\u001b[1;32m   1174\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1175\u001b[0m         \u001b[0mlabels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_axis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1176\u001b[0;31m         \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlabels\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mslice_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mslice_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mslice_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mslice_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1177\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1178\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mslice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/datetimes.py\u001b[0m in \u001b[0;36mslice_indexer\u001b[0;34m(self, start, end, step, kind)\u001b[0m\n\u001b[1;32m    809\u001b[0m             \u001b[0;32mor\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_monotonic_increasing\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    810\u001b[0m         ):\n\u001b[0;32m--> 811\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mIndex\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mslice_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstep\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkind\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mkind\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    812\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    813\u001b[0m         \u001b[0mmask\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mslice_indexer\u001b[0;34m(self, start, end, step, kind)\u001b[0m\n\u001b[1;32m   5683\u001b[0m         \u001b[0mslice\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5684\u001b[0m         \"\"\"\n\u001b[0;32m-> 5685\u001b[0;31m         \u001b[0mstart_slice\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend_slice\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mslice_locs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstart\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstep\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5686\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5687\u001b[0m         \u001b[0;31m# return a slice\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mslice_locs\u001b[0;34m(self, start, end, step, kind)\u001b[0m\n\u001b[1;32m   5891\u001b[0m         \u001b[0mend_slice\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5892\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mend\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5893\u001b[0;31m             \u001b[0mend_slice\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_slice_bound\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"right\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5894\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mend_slice\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5895\u001b[0m             \u001b[0mend_slice\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_slice_bound\u001b[0;34m(self, label, side, kind)\u001b[0m\n\u001b[1;32m   5795\u001b[0m         \u001b[0;31m# For datetime indices label may be a string that has to be converted\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5796\u001b[0m         \u001b[0;31m# to datetime boundary according to its resolution.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5797\u001b[0;31m         \u001b[0mlabel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_cast_slice_bound\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mside\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5798\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5799\u001b[0m         \u001b[0;31m# we need to look up the label\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/datetimes.py\u001b[0m in \u001b[0;36m_maybe_cast_slice_bound\u001b[0;34m(self, label, side, kind)\u001b[0m\n\u001b[1;32m    756\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_deprecate_mismatched_indexing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    757\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 758\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_invalid_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"slice\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    759\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    760\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_maybe_cast_for_get_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlabel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: cannot do slice indexing on DatetimeIndex with these indexers [60] of type int"]}]},{"cell_type":"code","source":["RMSE_info"],"metadata":{"id":"DveFqGo8qNsy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#모델별 RMSE 시각화\n","ax = RMSE_info.plot(kind='bar', figsize=(10,5), rot=0, title='RMSE scores')\n","\n","for p in ax.patches:\n","    ax.annotate(np.round(p.get_height(),decimals=2), \n","                (p.get_x()+p.get_width()/2., p.get_height()), \n","                ha='center', va='center', xytext=(0, 10), \n","                textcoords='offset points', fontsize=14, color='black')"],"metadata":{"id":"8FzHn67yqPvC"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"collapsed_sections":[],"provenance":[{"file_id":"1XOYwlsfPevruKruE6C_pPuFd2WPP6YMd","timestamp":1668339661261}],"authorship_tag":"ABX9TyM5OkxD8feoBy8FnkMQo1Tc"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}